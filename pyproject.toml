[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "yahoo-export"
dynamic = ["version"]
description = 'Export Yahoo Fantasy Football data from historical records and live data.'
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = []
authors = [
  { name = "Tim Cuddeback", email = "cuddebtj@gmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
packages = [{include = "yahoo_export", from = "src"}]
dependencies = [
  "loguru>=0.7",
  "pyyaml>=6.0",
  "python-dotenv>=1.0",
  "pydantic>=2.1",
  "pydantic-settings>=2.0",
  "requests>=2.3",
  "authlib>=1.2",
  "ratelimit>=2.2",
  "pytz>=2023.3",
]

[project.urls]
Documentation = "https://github.com/unknown/yahoo-export#readme"
Issues = "https://github.com/unknown/yahoo-export/issues"
Source = "https://github.com/unknown/yahoo-export"

[tool.hatch.version]
path = "src/yahoo_export/__about__.py"

[tool.hatch.envs.default]
dependencies = [
  "loguru>=0.7",
  "pyyaml>=6.0",
  "python-dotenv>=1.0",
  "pydantic>=2.1",
  "pydantic-settings>=2.0",
  "requests>=2.3",
  "authlib>=1.2",
  "ratelimit>=2.2",
  "pytz>=2023.3",

[tool.hatch.envs.test]
dependencies = [
  "coverage[toml]>=1.11",
  "pytest>=7.4",
  "pytest-cov>=4.1"
]

[tool.hatch.envs.test.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.7", "3.8", "3.9", "3.10", "3.11"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.7",
  "mypy>=1.4",
  "ruff>=0.0.278",
  "bandit[toml]>=1.7",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/yahoo_export tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
  "bandit -c pyproject.toml -r"
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.hatch.build.targets.sdist]
exclude = [
  "/.github",
]

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.black]
target-version = ["py310"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py310"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["yahoo_export"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
"__init__.py" = ["E402", "F401"]

[tool.bandit]
exclude_dirs = [
    "tests",
    "data_cache",
]

[tool.bandit.any_other_function_with_shell_equals_true]
no_shell = [
  "os.execl",
  "os.execle",
  "os.execlp",
  "os.execlpe",
  "os.execv",
  "os.execve",
  "os.execvp",
  "os.execvpe",
  "os.spawnl",
  "os.spawnle",
  "os.spawnlp",
  "os.spawnlpe",
  "os.spawnv",
  "os.spawnve",
  "os.spawnvp",
  "os.spawnvpe",
  "os.startfile"
]
shell = [
  "os.system",
  "os.popen",
  "os.popen2",
  "os.popen3",
  "os.popen4",
  "popen2.popen2",
  "popen2.popen3",
  "popen2.popen4",
  "popen2.Popen3",
  "popen2.Popen4",
  "commands.getoutput",
  "commands.getstatusoutput"
]
subprocess = [
  "subprocess.Popen",
  "subprocess.call",
  "subprocess.check_call",
  "subprocess.check_output"
]

[tool.bandit]
exclude_dirs = [
    "tests",
    "alembic",
    "assests",
    "data_cache",
]

[tool.bandit.any_other_function_with_shell_equals_true]
no_shell = [
  "os.execl",
  "os.execle",
  "os.execlp",
  "os.execlpe",
  "os.execv",
  "os.execve",
  "os.execvp",
  "os.execvpe",
  "os.spawnl",
  "os.spawnle",
  "os.spawnlp",
  "os.spawnlpe",
  "os.spawnv",
  "os.spawnve",
  "os.spawnvp",
  "os.spawnvpe",
  "os.startfile"
]
shell = [
  "os.system",
  "os.popen",
  "os.popen2",
  "os.popen3",
  "os.popen4",
  "popen2.popen2",
  "popen2.popen3",
  "popen2.popen4",
  "popen2.Popen3",
  "popen2.Popen4",
  "commands.getoutput",
  "commands.getstatusoutput"
]
subprocess = [
  "subprocess.Popen",
  "subprocess.call",
  "subprocess.check_call",
  "subprocess.check_output"
]

[tool.coverage.run]
source_pkgs = ["yahoo_export", "tests"]
branch = true
parallel = true
omit = [
  "src/yahoo_export/__about__.py",
]

[tool.coverage.paths]
yahoo_export = ["src/yahoo_export", "*/yahoo-export/src/yahoo_export"]
tests = ["tests", "*/yahoo-export/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_scheme = "pep440"
version_provider = "pep621"
update_changelog_on_bump = true
